{
  "imports": [
    {
      "classes": [
        "Creature"
      ],
      "path": "creature"
    },
    {
      "classes": [
        "Brain"
      ],
      "path": "brain"
    },
    {
      "classes": [
        "Body"
      ],
      "path": "body"
    }
  ],
  "classes": [
    {
      "name": "Population",
      "parent": null,
      "members": [
        {
          "type": {
            "target": "Creature",
            "type": "list"
          },
          "name": "creatures",
          "access": "dynamic"
        },
        {
          "type": "method",
          "name": "constructor",
          "access": "dynamic",
          "params": [
            "n",
            "size"
          ],
          "body": [
            {
              "type": "iter_local",
              "target": {
                "uno": null,
                "e": {
                  "type": "static",
                  "chain": [
                    {
                      "name": "n",
                      "type": "access"
                    }
                  ]
                }
              },
              "params": [],
              "body": [
                {
                  "type": "assignment",
                  "left": {
                    "type": "dynamic",
                    "chain": [
                      {
                        "name": "creatures",
                        "type": "access"
                      }
                    ]
                  },
                  "operator": "<<",
                  "right": {
                    "uno": "new",
                    "e": {
                      "type": "static",
                      "chain": [
                        {
                          "name": "Creature",
                          "type": "call",
                          "args": [
                            {
                              "uno": "new",
                              "e": {
                                "type": "static",
                                "chain": [
                                  {
                                    "name": "Brain",
                                    "type": "call",
                                    "args": [
                                      {
                                        "uno": null,
                                        "e": {
                                          "type": "static",
                                          "chain": [
                                            {
                                              "name": "size",
                                              "type": "access"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              "uno": "new",
                              "e": {
                                "type": "static",
                                "chain": [
                                  {
                                    "name": "Body",
                                    "type": "call",
                                    "args": [
                                      {
                                        "uno": null,
                                        "e": {
                                          "type": "static",
                                          "chain": [
                                            {
                                              "name": "size",
                                              "type": "access"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "type": "method",
          "name": "simulate",
          "access": "static",
          "params": [],
          "body": [
            {
              "type": "call",
              "callee": {
                "type": "lvalue",
                "access": "static",
                "chain": [
                  "Creature",
                  "simulate"
                ]
              },
              "args": []
            }
          ]
        },
        {
          "type": "external",
          "name": "test",
          "content": "function (path, isText)\n\t\n\t{\n\t\t\n\t\tif ( ! isText ) {\n\t\t\tthis._path = path;\n\t\t\tthis._source = fs.readFileSync(path).toString();\n\t\t} else {\n\t\t\tthis._path = '[INLINE]'+(new Error()).stack.split('\\n')[2];\n\t\t\tthis._source = path;\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tthis._compiled = Source._parser.parse(this._source);\n\t\t} catch (ex) {\n\t\t\tthis._compiled = null;\n\t\t\t\n\t\t\tif (ex.name !== 'SyntaxError') {\n\t\t\t\treturn this._error = {\n\t\t\t\t\tname: ex.name,\n\t\t\t\t\tmessage: ex.message,\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tconst splitted = this._source.split('\\n');\n\t\t\tconst that = this;\n\t\t\t\n\t\t\tthis._error = {\n\t\t\t\tname: ex.name,\n\t\t\t\tline: {\n\t\t\t\t\tnumber: ex.location.start.line,\n\t\t\t\t\tcolumn: ex.location.start.column,\n\t\t\t\t\ttext  : splitted[ex.location.start.line-1],\n\t\t\t\t},\n\t\t\t\tmessage: ex.message,\n\t\t\t\ttoString() {\n\t\t\t\t\treturn '\\n// ----------------------------------' +\n\t\t\t\t\t\t'\\n// JC Parser ERROR:\\n// ' +\n\t\t\t\t\t\t`At file ${that._path}\\n// At line ${this.line.number}\\n// ` +\n\t\t\t\t\t\tthis.line.text + '\\n// ' +\n\t\t\t\t\t\t(()=>{\n\t\t\t\t\t\t\tlet t = this.line.text.replace(/[^\\t]/g, ' ');\n\t\t\t\t\t\t\treturn t.slice(0,this.line.column-1) + '^' + t.slice(this.line.column);\n\t\t\t\t\t\t})() +\n\t\t\t\t\t\t'\\n// ' +this.message +\n\t\t\t\t\t\t'\\n// ----------------------------------\\n';\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this._error) {\n\t\t\tconsole.log(this._error.toString());\n\t\t}\n\t\t\n\t}"
        },
        {
          "type": "method",
          "name": "simulate2",
          "access": "static",
          "params": [],
          "body": [
            {
              "type": "call",
              "callee": {
                "type": "lvalue",
                "access": "static",
                "chain": [
                  "Creature",
                  "simulate"
                ]
              },
              "args": []
            }
          ]
        }
      ]
    }
  ]
}